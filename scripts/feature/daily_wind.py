
import math
import iemdb
import numpy
import iemplot
ASOS = iemdb.connect('asos', bypass=True)


def uv(sped, drct2):
  dirr = drct2 * math.pi / 180.00
  s = math.sin(dirr)
  c = math.cos(dirr)
  u = round(- sped * s, 2)
  v = round(- sped * c, 2)
  return u, v

#uwnd = numpy.zeros((366,), 'f')
#vwnd = numpy.zeros((366,), 'f')
#cnt = numpy.zeros((366,), 'f')
#acursor = ASOS.cursor()
#acursor.execute("""SELECT extract(doy from valid), sknt, drct from alldata
#  WHERE station = 'DSM' and sknt >= 0 and drct >= 0""")
#for row in acursor:
#  u,v = uv( row[1] * 0.514444, row[2])
#  uwnd[ int(row[0]) - 1 ] += u
#  vwnd[ int(row[0]) - 1 ] += v
#  cnt[ int(row[0]) - 1 ] += 1
#
import matplotlib.pyplot as plt
#
#u = uwnd / cnt
#v = vwnd / cnt
#
u = numpy.array( [1.4349576, 0.74407709, 1.1218433, 1.8957592, 1.097401, 1.8313866, 1.4904625, 1.2382103, 1.1575216, 1.2053958, 1.9661279, 1.9606124, 1.413994, 1.8915523, 0.86026978, 1.312809, 1.6602256, 1.7480457, 1.1318431, 0.079707786, 1.0307992, 1.6231593, 2.3780015, 1.9571369, 1.5821797, 1.2615454, 1.6390533, 1.043174, 1.7516718, 1.3760091, 0.92266279, 0.25784144, 0.46535972, 0.97338927, 0.75751877, 0.7830193, 1.3099844, 1.3693373, 0.63920331, 0.57567763, 1.2104437, 1.0456458, 1.186994, 0.60017443, 0.52945602, 0.57596236, 0.80170685, 0.17747097, 0.79526514, 0.97199696, 0.95554227, 0.97544426, 0.60511696, 0.67404026, 1.1811596, 0.51180208, 0.72789216, 0.46219689, 1.2062935, 0.96926266, 0.18741895, 0.34634936, 0.6953066, 0.029489368, 0.64442551, 0.11347318, 0.69105422, 0.29736966, -0.020881763, -0.21560188, -0.27562267, 0.42429966, 1.0564436, 1.0570512, 0.26670104, -0.47736803, -0.5001843, -0.10315706, -0.088837221, 0.36274311, 0.40278301, 0.10025242, -0.14159137, -0.080273174, 0.062087387, 0.020133724, 0.090776138, 0.068558715, 0.3750481, 0.79410863, 0.68196517, 0.048928414, 0.26412225, 0.20807485, 0.67212868, 0.60675609, 0.13266337, -0.015399384, -0.14943787, -0.44450814, -0.53494501, 0.54689473, -0.06515529, 0.57864892, 0.98411536, 0.98906958, 0.045429602, -0.40188232, -0.0025740867, 0.21321279, 0.13805164, -0.23566534, -0.56647283, -0.28175998, -0.15930565, -0.14758843, -0.10586152, 0.034005795, -0.55556947, 0.0067822621, 0.57205069, 0.26811472, -0.44505107, -0.45652711, 0.5416292, -0.2872127, -0.45745718, 0.23970519, 0.11253285, 0.13082698, 0.42214152, -0.099280253, -0.11344572, 0.93543243, 0.12423064, -0.48820445, -0.47332612, -0.017880492, 0.40713546, -0.43719843, -0.73018825, -0.34545255, -0.08343219, -0.085991286, -0.5046584, -0.34662291, -0.36953244, -0.097764239, -0.15783033, -0.25204787, 0.56633699, 0.031233709, -0.17943914, -0.025581708, -0.14758088, -0.016786795, -0.11833462, 0.0064858166, -0.20442338, -0.36553884, 0.11408193, 0.24450786, -0.46411461, -0.12664008, -0.38073185, -0.27395996, -0.087033093, -0.20750909, 0.31441808, 0.63669562, 0.18077108, 0.043979753, 0.26434773, -0.064397953, 0.075959079, 0.29348102, 0.33227435, 0.13973349, 0.12595341, 0.43615192, 0.3018333, -0.11738168, -0.23708871, 0.2121488, 0.31585658, -0.13631698, -0.1108813, -0.10928374, 0.30082026, 0.34572476, -0.32419893, -0.27249077, -0.22050996, -0.03033697, 0.13816583, -0.13064291, -0.034488823, 0.11336248, 0.21095109, -0.10299276, -0.47736269, -0.12259291, -0.37238646, -0.20770028, -0.22885506, -0.19653852, -0.12950122, 0.077918217, 0.14050494, -0.17681073, -0.32517612, -0.045565777, -0.077752754, -0.05887365, 0.39198968, -0.38535798, -0.69139004, -0.59749418, -0.32314131, -0.033316433, 0.017138854, -0.13232711, -0.60345221, -0.3073298, -0.32394087, -0.10214658, -0.44260621, -0.49983758, -0.52382451, -0.35100064, -0.22508445, -0.53543371, -0.41849977, -0.49030653, -0.18898383, -0.41084608, -0.50641644, -0.37522727, -0.25574759, -0.31382844, -0.27107367, -0.29115131, -0.011924752, -0.48402548, -0.093925312, -0.079539768, -0.32892457, -0.53280014, -0.26864812, -0.20080613, -0.4680191, 0.48656505, 0.20638908, 0.082357801, -0.024621837, -0.14862718, 0.30616009, -0.14504433, -0.65043241, -0.43790618, 0.20222391, 0.36609024, 0.068571381, 0.50703084, 0.47047326, -0.2700817, -0.18138, 0.2648257, 0.60121393, 0.64965278, 0.11056275, 0.40228525, 0.54713988, 0.25270867, 0.20467812, 0.64674777, 0.12100594, 0.088059209, 0.47427684, 0.43611825, 0.50231403, 0.69680017, 0.55060786, 0.44614604, 0.35992602, 0.48635057, 0.93656784, 0.55387461, 0.51302946, 0.8555994, 0.5937053, 0.47815344, 0.33538115, 0.36483943, 0.40587121, 0.42621404, 1.0233831, 0.64395469, 0.47746494, 0.83808571, 0.64911908, 0.17946008, 0.17874645, 0.76749587, 1.0362924, 1.0867029, 1.0540304, 0.7917034, 1.1338134, 1.1545353, 1.2422433, 1.110081, 1.1789473, 1.4731029, 0.70280898, 0.27310672, 1.01048, 0.90458685, 0.62765354, 1.3482378, 1.1626233, 0.99494016, 0.8927545, 1.6386015, 1.199882, 1.038051, 2.1753466, 0.9867571, 0.54900616, 0.19125651, 1.3233324, 2.1476138, 2.04268, 1.5632743, 1.1404446, 0.43802214, 1.2561575, 1.1338072, 1.3276947, 1.6022197, 1.3058097, 1.1095597, 1.5207318, 0.79288101, 0.81512815, 0.95481908, 1.0825176, 1.0443406, 1.7322429, 1.1593208, 1.4684377, 1.395225, 0.56592596, 0.97475666, 0.81633151, 2.0329134, 1.713344, 1.5111645, 1.8837689, 0.98682272, 0.55690944, 1.1208767, 0.97559547, 0.60839951, 1.226918] )
v = numpy.array( [-0.86049122, -0.025955053, -0.41409427, -1.0054598, 0.058684547, -0.95282835, -0.98916084, -0.89994639, -1.1296587, -0.49236593, -0.64840156, -0.1838842, -0.53727615, -1.1783838, -0.26293734, -0.40454039, -0.28905436, -0.99923366, -1.318168, -0.83639628, -0.37708423, -0.3898184, -0.48070663, -0.73708314, -1.1352496, -0.77993506, -0.58867764, -0.72094589, -1.0487994, -0.95510089, -0.281176, -1.4078988, -0.95620382, -1.1349849, -1.4059381, -0.84582013, -1.4372722, -0.65752548, -0.74195415, 0.10707031, -1.2173687, -1.1861963, -0.77525032, -0.54862452, -0.87184876, -1.151165, -0.98960024, 0.45276105, -0.056033246, -0.35934636, -0.44678262, -1.2438527, -0.64895695, -1.1019936, -0.9374221, -0.80949068, -0.48802501, -0.80115408, -1.2209579, -0.73356265, -0.93970555, -1.0643659, -1.1499549, -1.70516, -1.5281154, -0.61350989, -1.4116787, -0.9656226, -0.39293173, -0.69005829, -0.3616752, -0.71163589, -0.57335019, -1.2947084, -0.72771502, -0.84242713, -0.8229714, -1.0947058, -1.1032448, -1.1550431, -0.85589975, -0.47122625, -0.38262391, -0.39150545, 0.46553633, 1.2050109, -0.26316336, -0.14233552, 0.093760066, 0.10584655, -1.1553153, -0.41226119, -0.47363579, -0.74758959, -0.88380915, -0.42445835, -0.54468811, -1.3996829, -1.0128771, -0.36043593, 0.01937299, -0.62337279, -0.029985202, -0.12183384, -0.28266212, -0.31209034, -0.21871099, 0.56265682, 0.74159735, 0.58228213, -0.3972626, 0.31351972, 0.27530921, -0.10378186, 0.23381838, 0.3801108, -0.101701, 0.08818309, 0.66542929, -0.46097422, 0.078628264, 0.82561183, 0.20103699, 0.89206713, 1.0996298, 0.62454927, 0.11051908, 0.52746755, 0.63635063, 0.53050351, 0.060882639, -0.14528857, 0.40611619, 0.21840706, 0.69654262, 0.48999271, 0.67987621, 0.32793826, 0.59150177, 0.87885898, 1.1314167, 0.980344, 0.92034632, 0.52502185, -0.025174176, 0.34289309, 0.70192289, 0.98811436, 0.88035011, 1.4096732, 0.30293608, 0.38326532, 0.58016235, 0.39077833, 1.142506, 1.2211323, 1.5104425, 1.5981712, 0.68712366, 0.95310253, 1.2344564, 1.1490377, 1.0242604, 1.1133745, 1.4840943, 1.1721226, 1.1709154, 1.9134758, 1.4288725, 1.1710117, 0.89497459, 1.2436321, 0.98650014, 1.2694088, 1.4345459, 1.2362906, 1.4921094, 1.3310579, 1.0014411, 0.95946217, 0.6131624, 1.1344931, 1.5874245, 1.8704479, 0.48065898, 0.86785954, 1.2811204, 1.6179085, 1.0557252, 0.29460454, 0.91131145, 1.155593, 1.0768209, 0.4485051, 0.88918465, 0.65767729, 1.7274326, 1.6386302, 1.1639277, 0.8494997, 0.623959, 0.56352532, 0.35731348, 0.74408239, 1.0159328, 1.2183833, 1.01169, 0.81522012, 0.59777296, 0.61514175, 1.0827237, 0.37706587, 0.87914896, 0.92018926, 0.96774977, 0.45160916, 0.50700098, 0.50808454, 0.92567593, 1.0192741, 1.0560598, -0.13624623, 0.44836095, 0.91498899, 0.85162997, 1.0081245, 0.91098106, 0.9798525, 0.70727807, 0.92255634, 0.40468088, 1.0365126, 1.4040209, 1.292537, 1.5728207, 1.0816418, 1.5352317, 1.7164596, 1.5099618, 1.0666248, 0.89393353, 1.0069494, 1.015846, 1.5529007, 1.5550741, 0.85853994, 0.99242944, 1.0959263, 1.4993834, 0.73875821, 1.6866482, 1.0468695, 0.68321598, 1.2199935, 0.92105645, 0.73500413, 0.22207563, 0.15723312, 1.091862, 1.6171457, 1.640896, 1.0017515, 0.61370802, 0.16525151, 0.27705628, 0.20575434, 0.72472322, 0.52809662, 0.99074805, 0.58975559, 0.32627651, 0.99068761, 0.5469687, 0.94937575, 1.3214567, 0.21526541, 0.50682694, -0.011992696, 0.54873848, 1.2430298, 0.81299752, -0.21908467, 0.68769264, 1.0776124, 0.82477444, 1.0415107, 0.67557335, 0.56098872, -0.028414752, 0.45714515, 0.087845117, 0.52095997, 0.79935628, 0.65309477, 0.05590079, 0.056044102, -0.15836059, 0.11259427, 0.35183483, 0.62402844, 0.53464115, 0.86109507, 0.76310575, 0.27357662, -0.63110918, -0.5773803, -0.1877746, -0.10458921, -0.46985903, 0.14803033, 1.0066389, 0.28486317, -0.25617835, -0.46743569, 0.11559517, 0.30988169, 0.51760632, 0.57694691, 0.12719429, -0.21646726, 0.62219524, 0.96951145, 0.018485928, -0.38564867, -0.38061866, 0.30016321, -0.90233392, -0.096949995, 0.088020854, -0.51646733, -1.1318336, -0.90991861, -0.5300594, -0.56592178, -0.0097213564, -0.029451709, -0.10740399, -0.076116838, -0.62857473, -0.52318585, -0.5952062, -1.0242939, -0.94311684, 0.061362922, -0.95305383, 0.17523274, -0.38620299, -0.2809639, -0.76396805, -0.33841971, -0.23839326, -0.81113464, -0.79226553, -0.94194555, -0.25829864, -0.36076671, -0.5759778, -0.93791217, -0.70451391, -0.10421828, 0.23437826, 0.31975695, -1.0103831, -0.047225069, -0.4191168] )


fig = plt.figure()
ax = fig.add_subplot(111)

def smooth(x,window_len=11,window='hanning'):
    """smooth the data using a window with requested size.
    
    This method is based on the convolution of a scaled window with the signal.
    The signal is prepared by introducing reflected copies of the signal 
    (with the window size) in both ends so that transient parts are minimized
    in the begining and end part of the output signal.
    
    input:
        x: the input signal 
        window_len: the dimension of the smoothing window; should be an odd integer
        window: the type of window from 'flat', 'hanning', 'hamming', 'bartlett', 'blackman'
            flat window will produce a moving average smoothing.

    output:
        the smoothed signal
        
    example:

    t=linspace(-2,2,0.1)
    x=sin(t)+randn(len(t))*0.1
    y=smooth(x)
    
    see also: 
    
    numpy.hanning, numpy.hamming, numpy.bartlett, numpy.blackman, numpy.convolve
    scipy.signal.lfilter
 
    TODO: the window parameter could be the window itself if an array instead of a string   
    """

    if x.ndim != 1:
        raise ValueError, "smooth only accepts 1 dimension arrays."

    if x.size < window_len:
        raise ValueError, "Input vector needs to be bigger than window size."


    if window_len<3:
        return x


    if not window in ['flat', 'hanning', 'hamming', 'bartlett', 'blackman']:
        raise ValueError, "Window is on of 'flat', 'hanning', 'hamming', 'bartlett', 'blackman'"


    s=numpy.r_[2*x[0]-x[window_len:1:-1],x,2*x[-1]-x[-1:-window_len:-1]]
    #print(len(s))
    if window == 'flat': #moving average
        w=ones(window_len,'d')
    else:
        w=eval('numpy.'+window+'(window_len)')

    y=numpy.convolve(w/w.sum(),s,mode='same')
    return y[window_len-1:-window_len+1]


ax.plot( numpy.arange(1,366), smooth(u,14,'hamming'), color='r', label='u, West(+) : East(-) component')
ax.plot( numpy.arange(1,366), smooth(v,14,'hamming'), color='b', label='v, South(+) : North(-) component')
ax.set_xticks( (1,32,60,91,121,152,182,213,244,274,305,335,365) )
ax.set_xticklabels( ('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec') )
ax.legend()
ax.grid(True)
ax.set_xlim(0,366)
ax.set_title("Des Moines Daily Average Component Wind Speed\n[1950-2010] 14 day smooth filter applied")
ax.set_ylabel("Average Wind Speed $m s^{-1}$")
plt.savefig('test.ps')
iemplot.makefeature("test")
