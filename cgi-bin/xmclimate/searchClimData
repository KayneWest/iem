#!/usr/bin/perl

# CGI script to display xmclimate data 

$|=1;

use CGI qw/:standard :html3/;

$JSCRIPT=<<END;
function chgButtonName(thisform) {
   if (thisform.search.selectedIndex == 0) {
     thisform.first.value="Highest";
     thisform.second.value="Lowest";
     thisform.threshold.value=1;
   } else {
     if (thisform.search.selectedIndex>3 && thisform.search.selectedIndex<7) {
        thisform.first.value=" ";
        thisform.second.value=" ";
        thisform.threshold.value=" ";
     } else {
        thisform.first.value="GreaterThan";
        thisform.second.value="LessThan";
        thisform.threshold.value=40;
     }
   }
}
function isNumber(inputStr, alertStr) {
   for (var i = 0; i < inputStr.length; i++) {
      var oneChar = inputStr.substring(i, i + 1);
      if ((oneChar > "/" && charCode < ":") || charCode == "+" || charCode == "-" || charCode == ".") {
	 alert(alertStr);
	 return false;
      }
   }
   return true;
}
function chkLimitString(thisform) {
   var inputStr = thisform.threshold.value;
   if (thisform.variable.selectedIndex > 2 && thisform.variable.selectedIndex < 6) {
      var oneChar = inputStr.substring(0,1);
      if (oneChar == "T" || oneChar == "t") {
         thisform.threshold.value = "Trace";
      } else {
	 var alertStr = "Enter numeric value or Trace only."; 
         if (isNumber(inputStr, alertStr)) {
            // inuput is a number
         } else {
            thisform.numeric.focus();
            thisform.numeric.select();
         }
      }
   } else {
      var alertStr = "Enter numeric value only."; 
      if (isNumber(inputStr, alertStr)) {
         // inuput is a number
      } else {
         thisform.numeric.focus();
         thisform.numeric.select();
      }
   }
}
function checkEachKey(thisform, e) {
   var charCode = (navigator.appName == "Netscape") ? e.which : e.keyCode;
   status = charCode;  // checking ASCII character value;
   if ((charCode > 47 && charCode < 58) || charCode == 43 || charCode == 45 || charCode == 46 || charCode == 8) {
      return true;
   } else {
      if (thisform.variable.selectedIndex > 2 && thisform.variable.selectedIndex < 6) {
         if (charCode == 84 || charCode == 116) {
            thisform.threshold.value = "Trace";
            return false;
	 } else {
            alert("Enter numbers or Trace only");
            return false;
	 }
      } else {
         alert("Enter numbers only");
         return false;
      }
   }
}
function setMonthDays(thisform, panelnum)
{
   var i;
   var ndm = new Array();
   ndm[0] = 31;  ndm[1] = 29;  ndm[2] = 31;
   ndm[3] = 30;  ndm[4] = 31;  ndm[5] = 30;
   ndm[6] = 31;  ndm[7] = 31;  ndm[8] = 30;
   ndm[9] = 31;  ndm[10]= 30; ndm[11]= 31;

   if (panelnum == 0) {
      thisform.startday.options.length = 0;
      for (i = 0; i < ndm[thisform.startmonth.selectedIndex]; ++i) {
         thisform.startday.options[i] = new Option(i + 1,i + 1,false,false);
      }
      thisform.startday.options[0].selected = true;
   } else {
      thisform.endday.options.length = 0;
      for (i = 0; i < ndm[thisform.endmonth.selectedIndex]; ++i) {
         thisform.endday.options[i] = new Option(i + 1,i + 1,false,false);
      }
      thisform.endday.options[i - 1].selected = true;
   }
}
END

# settings for climate search form page
#
$exec_path = "/usr/local/xmclimate/bin";
$data_path = "/usr/local/xmclimate/DATA";
$map_url = "http://mesonet.agron.iastate.edu/xmclimate/webcli.htm";

# set up a list and a hash for the months
%months = qw(January 01 February 02 March 03 April 04 May 05 June 06 July 07 August 08 September 09 October 10 November 11 December 12);
@mon = qw(January February March April May June July August September October November December);

# set up a list for days of the month
@days = qw(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31);

# set up a list for the maximum records
@records = qw(5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 25 30 35 40 45 50);

# set up a list and a hash for the search type
@searches = qw(Extremes Consecutive_Days Monthly_Frequencies Daily_Frequencies Monthly_Totals Calendar_Day_Avgs Averages First/Last_Dates);
%srchcodes = qw(Extremes extrm Consecutive_Days consec Monthly_Frequencies mofrq Daily_Frequencies dafrq Monthly_Totals mtot Calendar_Day_Avgs davg Averages avg First/Last_Dates frlst);

# set up a list and a hash for the variable type
@variables = qw(Maximum_Temp Minimum_Temp Average_Temp Precipitation Snowfall Snow_on_Gnd Heating_Degree_Days Cooling_Degree_Days Growing_Degree_Days);
%vrblcodes = qw(Maximum_Temp maxt Minimum_Temp mint Average_Temp avgt Precipitation pcpn Snowfall snow Snow_on_Gnd snwg Heating_Degree_Days hdd Cooling_Degree_Days cdd Growing_Degree_Days gdd);

# set up a hash for the list of stations
%stations = (
	DSM => "KDSM",
        Craig => "CRGA2",
	Elfin_Cove => "PAEL",
        Glacier_Bay => "GSTA2",
	Gustavus => "PAGS",
	Haines => "AHNA2",
	Haines_Airport => "PAHN",
	Haines_Customs => "HCSA2",
	Hollis => "KLWA2",
        Hoonah => "PAOH",
	Hyder => "HYDA2",
	Juneau_Airport => "PAJN",
	Auke_Bay_Lab => "AUKA2",
	Juneau_Downtown => "JNAA2",
        Juneau_Forecast_Office => "PAJK",
	Lena_Point => "JLPA2",
	Ketchikan => "PAKT",
        Klawock => "PAKW",
        Little_Port_Walter => "SITA2",
	Petersburg => "PAPG",
	Port_Alexander => "PAAP",
	Skagway_Airport => "PAGY",
	Skagway => "SPTA2",
	Skagway_Customs => "SGCA2",
	Sitka => "PASI",
	Wrangell => "PAWG",
	Yakutat => "PAYA",
);

#  Get the command line params

$form_test = param("form_test");
$station = param("station");
$search = param("search");
$variable = param("variable");
$criteria = param("criteria");
$threshold = param("threshold");
$maxrecords = param("maxrecords");
$startmonth = param("startmonth");
$endmonth = param("endmonth");
$startday = param("startday");
$endday = param("endday");
$startyear = param("startyear");
$endyear = param("endyear");

($station_name = $station) =~ s/_/ /g;
# If user selected data then process request
if($form_test eq "true") {
	$req_url=url . "?station=" . $station;
	print header(),'<font face="Arial, Helvetica, sans-serif">',
	start_html({bgcolor=>white},"Climate Data Search Request"),
	 a({href=>$map_url},"Back to the clickable map"),"<br>",
	 a({href=>$req_url},"Back to the data search form"),"<br><br>";

        # save link to current site 
	$my_url=self_url;

	# search the data file
	&get_search_data;

#  Otherwise, display the user request section

} else { 

	&print_search_form;
} 
print end_html;
exit;

#####################################################################
# PRINT SEARCH REQUEST FORM
sub print_search_form {

print header(),'<font face="Arial, Helvetica, sans-serif">',
   start_html(-title=>'Search Form', 
       -script=>$JSCRIPT, "Climate Data Search Form"),
       h1("Climate Data Search Form for $station_name");

print hr();
print start_form();

# assign hidden values that will be returned to the script 
# on submission
print hidden(-name=>'form_test', -default=>['true']);
print hidden(-name=>'station', -default=>['$station']);

#  Get the beginning/ending month/year for that station
$line = `$exec_path/climRead -p bmonth byear emonth eyear -s $stations{$station} -d $data_path -F "%2d" "%4d" "%2d" "%4d"`; 
$line =~ s/^\s+//;
($file_beg_mon, $file_beg_year, $file_end_mon, $file_end_year) = split (/\s+/,$line);

#  Now set up a list of years
@year_list=();

$yr = $file_end_year;
while ($yr >= $file_beg_year) {
	push(@year_list,$yr);
	$yr -= 1;
}
print table({-border=>3, -bgcolor=>white},
   Tr(td({-align=>CENTER},'<B>Search</B>'),td({-align=>CENTER},'<B>Variables</B>'), td({-align=>CENTER},'<B>Criteria</B>')), 
   Tr(td({-align=>CENTER},popup_menu(-name=>"search", -values=>[@searches], -onChange=>"chgButtonName(this.form)", -default=>$searches[0])), 
      td({-align=>CENTER},popup_menu(-name=>"variable", -values=>[@variables], -default=>$variables[0])),
   td('<INPUT TYPE="radio" NAME="criteria" VALUE="highest" CHECKED>
   <INPUT TYPE="text" SIZE=11 NAME="first" VALUE="Highest">
   <INPUT TYPE="radio" NAME="criteria" VALUE="lowest">
   <INPUT TYPE="text" SIZE=11 NAME="second" VALUE="Lowest">',
   textfield(-name=>'threshold', -size=>5, -onKeyPress=>"return checkEachKey(this.form, event)", -onChange=>"chkLimitString(this.form)", -default=>1))));

print table({-border=>3, -bgcolor=>white},
   Tr(td('<B>Start Date</B>'), td(popup_menu(-name=>"startmonth", -values=>[@mon], -onChange=>"setMonthDays(this.form, 0)", -default=>$mon[0])), 
   td(popup_menu(-name=>"startday", -values=>[@days], -default=>$days[0])), 
   td(popup_menu(-name=>"startyear", -values=>[@year_list],
				-default => $file_beg_year))),
   Tr(td('<B>End Date</B>'), td(popup_menu(-name=>"endmonth", -values=>[@mon], -onChange=>"setMonthDays(this.form, 1)", -default=>$mon[11])),
   td(popup_menu(-name=>"endday", -values=>[@days], -default=>$days[30])),
   td(popup_menu(-name=>"endyear", -values=>[@year_list],
				-default=>$file_end_year))));
print "Max Records:", popup_menu(-name=>"maxrecords", -values=>[@records], -default=>$records[0]), reset("Reset"), "&nbsp&nbsp&nbsp&nbsp&nbsp", submit();

print end_form();

print a({href=>$map_url},"Back to the clickable map");

}

#####################################################################
# retrieve the results of the search
sub get_search_data {

#build command for climSearch
@data = ();
$bmon = $months{$startmonth};
$emon = $months{$endmonth};

#  Test the year and if it doesn't make sense, 
#  print out an error message.
if($startyear < 1880 || $endyear > 2010) {
   &error_route
}

undef($limitarg);
if ($criteria =~ /highest/) {
   if ($search =~ /Freq/ || $search =~ /Consec/ || $search =~ /First/) {
      $limitarg = sprintf("-gt %s", $threshold);
   } else {
      $limitarg = '-hi';
   }
} else {
   if ($search =~ /Freq/ || $search =~ /Consec/ || $search =~ /First/) {
      $limitarg = sprintf("-lt %s", $threshold);
   } else {
      $limitarg = '-lo';
   }
}
#open(OUTLOG, ">>/home/akdata/climLog");
#print OUTLOG "crit = $criteria  limit = $limitarg \n";
#print OUTLOG "$exec_path/climSearch -stn $stations{$station} -d $data_path -maxrec $maxrecords -srch $srchcodes{$search} $limitarg -vrbl $vrblcodes{$variable} -bd $bmon/$startday/$startyear -ed $emon/$endday/$endyear\n"; 
#print OUTLOG "arg is $limitarg\n";
#close(OUTLOG);


@data = `$exec_path/climSearch -stn $stations{$station} -d $data_path -maxrec $maxrecords -srch $srchcodes{$search} $limitarg -vrbl $vrblcodes{$variable} -bd $bmon/$startday/$startyear -ed $emon/$endday/$endyear`; 

$n = 0;

# Print out the header depending on what type of data was requested.

print "<pre>";
print '<font face="Arial, Helvetica, sans-serif" color="red">',h3(b("Climate Search Results for $station_name"));
	print "<br>";
	print '<font face="Arial, Helvetica, sans-serif" color="red">';
        print "<I>This data is unofficial. For official data go to the <A href='http://www.ncdc.noaa.gov'>National Climatic Data Center Home Page.</A></I>";
	print '<font face="Arial, Helvetica, sans-serif" color="blue">';
	print "<hr>";

#  Print out the data, based on what type was requested.
foreach $line (@data) {
	$n++;
	print "$line";
}

print "</pre>\n";
}
#####################################################################
sub error_route {

	print "<pre>\n";
	print h3("Please reenter the Year data.");
	print "</pre>\n";
	$my_url=url . "?station=" . $station;
	print a({href=>$my_url},"Back to entry form");
	exit;
}



