#!/usr/bin/perl

# CGI script to display xmclimate data 

$|=1;
use CGI qw(:standard);

#  settings for climate page

$exec_path = "/usr/local/xmclimate/bin";
$data_path = "/usr/local/xmclimate/DATA";
$map_url = "http://mesonet.agron.iastate.edu/xmclimate/webcli.htm";

# set up a hash for the months

%months = qw(January 01 February 02 March 03 April 04 May 05 June 06 July 07 August 08 September 09 October 10 November 11 December 12);
@mon = qw(January February March April May June July August September October November December);


#  Get the command line params

$form_test = param("form_test");
$station = param("station");
$monthname = param("monthname");
$year = param("year");
$ob_norm = param("ob_norm");

($station_name = $station) =~ s/_/ /g;
# If user selected data then process request
if($form_test eq "true") {

	$req_url=url . "?station=" . $station;
	print header(),'<font face="Arial, Helvetica, sans-serif">',start_html("Climate DATA Requested"),
	 a({href=>$map_url},"Back to the clickable map"),"<br><br>";
#  Add links to go backward or forward one month

	$my_url=self_url;

	$cur_month_num = $months{$monthname};
	if ($cur_month_num == 12) {
		$next_month = "January";
		$next_year = $year + 1;
		$prev_month = "November";
		$prev_year = $year;
	} elsif ($cur_month_num == 01) {
		$next_month = "February";
		$next_year = $year;
		$prev_month = "December";
		$prev_year = $year - 1;
	} else {
		$next_month = @mon[$cur_month_num+1-1];
		$next_year = $year;
		$prev_month = @mon[$cur_month_num-1-1];
		$prev_year = $year;
	}

	($back_month = $my_url) =~ s/$year/$prev_year/;
	$back_month =~ s/$monthname\&/$prev_month\&/;
	($forward_month = $my_url) =~ s/$year/$next_year/;
	$forward_month =~ s/$monthname\&/$next_month\&/;
	print a({href=>$back_month},"<-- Prev Month"),"&nbsp&nbsp&nbsp&nbsp", a({href=>$forward_month},"Next Month -->");
	print p();
	print "This data is not official. For official data go to the  <A href='http://www.ncdc.noaa.gov'>NCDC Home Page.</A>";
	print hr(),p(),"<center>";


	&get_data;

#  Otherwise, display the user request section

} 

sub get_data {

#build command for climread
@data = ();
@datamaxt = ();
@datamint = ();
@datapcpn = ();
@datasnow = ();
@datasnwg = ();
@datanmmaxt = ();
@datanmmint = ();
@datanmpcpn = ();
@datanmsnow = ();
@datahimaxt = ();
@datalomaxt = ();
@datalomint = ();
@datahimint = ();
@datahipcpn = ();
@datahisnow = ();
@datapkwnddir = ();
@datapkwndspd = ();
@dataavgwnd = ();
@datawxcode = ();
$monum = $months{$monthname};
if ($ob_norm eq "Observed Data") {

# if we're getting observed data, specify the year in the -b parameter.   
	@datamaxt = `$exec_path/climRead -yr -p maxt -s $station -d $data_path  -b $monum/0/$year -F "%3d"`; 
        @datamint = `$exec_path/climRead -yr -p mint -s $station -d $data_path  -b $monum/0/$year -F "%3d"`;
        @datapcpn = `$exec_path/climRead -yr -p pcpn -s $station -d $data_path  -b $monum/0/$year -F "%5.2f"`;
        @datasnow = `$exec_path/climRead -yr -p snow -s $station -d $data_path  -b $monum/0/$year -F "%4.1f"`;
        @datasnwg = `$exec_path/climRead -yr -p snwg -s $station -d $data_path  -b $monum/0/$year -F "%3d"`;
        @datapkwnddir = `$exec_path/climRead -yr -p pkwnddir -s $station -d $data_path  -b $monum/0/$year -F "%3d"`;
        @datapkwndspd = `$exec_path/climRead -yr -p pkwndspd -s $station -d $data_path  -b $monum/0/$year -F "%3d"`;
        @dataavgwnd = `$exec_path/climRead -yr -p avgwnd -s $station -d $data_path  -b $monum/0/$year -F "%4.1f"`;
        @datawxcode = `$exec_path/climRead -yr -p wxcode -s $station -d $data_path  -b $monum/0/$year -F "%5d"`;
        $monmmaxt = `$exec_path/climRead -yr -p mo_nmmaxt -s $station -d $data_path -b $monum/1/1990 -F "%4.1f"`;
        $monmmint = `$exec_path/climRead -yr -p mo_nmmint -s $station -d $data_path -b $monum/1/1990 -F "%4.1f"`;
        $monmtemp = `$exec_path/climRead -yr -p mo_nmtemp -s $station -d $data_path -b $monum/1/1990 -F "%4.1f"`;
        $monmhdd = `$exec_path/climRead -yr -p mo_nmhdd -s $station -d $data_path -b $monum/1/1990 -F "%3d"`;
        $monmcdd = `$exec_path/climRead -yr -p mo_nmcdd -s $station -d $data_path -b $monum/1/1990 -F "%3d"`;
        $monmpcpn = `$exec_path/climRead -yr -p mo_nmpcpn -s $station -d $data_path -b $monum/1/1990 -F "%5.2f"`;
        $monmsnow = `$exec_path/climRead -yr -p mo_nmsnow -s $station -d $data_path -b $monum/1/1990 -F "%4.1f"`;
} else {

# otherwise, we're getting normals or records, which don't really require a year.
	@datanmmaxt = `$exec_path/climRead -yr -p nmmaxt -s $station -d $data_path -b $monum/0/1990 -F "%3d"`; 
        @datanmmint = `$exec_path/climRead -yr -p nmmint -s $station -d $data_path -b $monum/0/1990 -F "%3d"`;
        @datanmtemp = `$exec_path/climRead -yr -p nmtemp -s $station -d $data_path -b $monum/0/1990 -F "%3d"`;
        @datanmhdd = `$exec_path/climRead -yr -p nmhdd -s $station -d $data_path -b $monum/0/1990 -F "%3d"`;
        @datanmcdd = `$exec_path/climRead -yr -p nmcdd -s $station -d $data_path -b $monum/0/1990 -F "%3d"`;
        @datanmpcpn = `$exec_path/climRead -yr -p nmpcpn -s $station -d $data_path -b $monum/0/1990 -F "%5.2f"`;
        @datanmsnow = `$exec_path/climRead -yr -p nmsnow -s $station -d $data_path -b $monum/0/1990 -F "%4.1f"`;
        @datahimaxt = `$exec_path/climRead -yr -p himaxt -s $station -d $data_path -b $monum/0/1990 -F "%3d"`;
        @datalomaxt = `$exec_path/climRead -yr -p lomaxt -s $station -d $data_path -b $monum/0/1990 -F "%3d"`;
        @datalomint = `$exec_path/climRead -yr -p lomint -s $station -d $data_path -b $monum/0/1990 -F "%3d"`;
        @datahimint = `$exec_path/climRead -yr -p himint -s $station -d $data_path -b $monum/0/1990 -F "%3d"`;
        @datahipcpn = `$exec_path/climRead -yr -p hipcpn -s $station -d $data_path -b $monum/0/1990 -F "%5.2f"`;
	@datahisnow = `$exec_path/climRead -yr -p hisnow -s $station -d $data_path -b $monum/0/1990 -F "%4.1f"`;
        $monmmaxt = `$exec_path/climRead -yr -p mo_nmmaxt -s $station -d $data_path -b $monum/1/1990 -F "%4.1f"`;
        $monmmint = `$exec_path/climRead -yr -p mo_nmmint -s $station -d $data_path -b $monum/1/1990 -F "%4.1f"`;
        $monmtemp = `$exec_path/climRead -yr -p mo_nmtemp -s $station -d $data_path -b $monum/1/1990 -F "%4.1f"`;
        $monmhdd = `$exec_path/climRead -yr -p mo_nmhdd -s $station -d $data_path -b $monum/1/1990 -F "%3d"`;
        $monmcdd = `$exec_path/climRead -yr -p mo_nmcdd -s $station -d $data_path -b $monum/1/1990 -F "%3d"`;
        $monmpcpn = `$exec_path/climRead -yr -p mo_nmpcpn -s $station -d $data_path -b $monum/1/1990 -F "%5.2f"`;
        $monmsnow = `$exec_path/climRead -yr -p mo_nmsnow -s $station -d $data_path -b $monum/1/1990 -F "%4.1f"`;
}


$n = 0;

# Print out the header depending on what type of data was requested.


if ($ob_norm eq "Observed Data") {
	print '<font face="Arial, Helvetica, sans-serif" color="red">',h3(b("Observed Data for $station_name for $monthname $year")),
        "<table border=1 bgcolor=#ffffff>",
	Tr(td(['Day','Max','Min','Avg','HDD','CDD','GDD','Precip','Snowfall','Depth','Pk Dir','Pk Spd','Avg Wnd','Weather']));
}

if ($ob_norm eq "Normals") {
	print '<font face="Arial, Helvetica, sans-serif" color="red">',h3(b("Normals Data for $station_name for $monthname")),
        "<table border=1 bgcolor=#ffffff>",
        Tr(td(['Day','Max','Min','Avg','HDD','CDD','Precip','Snowfall']));
}

if ($ob_norm eq "Records") {
	print '<font face="Arial, Helvetica, sans-serif" color="red">',h3(b("Record Data for $station_name for $monthname")),
        "<table border=1 bgcolor=#ffffff>",
        Tr(td(['Day','High Max','Year','Low Max','Year','Low Min','Year','High Min','Year','Precip','Year','Snow','Year']));
}

#  Print out the data, based on what type was requested.

$maxt_total=0;
$mint_total=0;
$pcpn_total=0;
$snow_total=0;
$avg_total=0;
$hdd_total=0;
$cdd_total=0;
$gdd_total=0;
$wnd_total=0;
$num_maxt=0;
$num_mint=0;
$num_pcpn=0;
$num_snow=0;
$num_avg=0;
$num_hdd=0;
$num_cdd=0;
$num_gdd=0;
$num_wnd=0;
$dep_maxt=0;
$dep_mint=0;
$dep_pcpn=0;
$dep_snow=0;
$dep_avg=0;
$dep_hdd=0;
$dep_cdd=0;
print "<td>";
if ($ob_norm eq "Observed Data") {
foreach $line (@datamaxt) {
	$n++;
	if ($ob_norm eq "Observed Data") {
		print "<br>";
		print $n;
		}
           }
print "</td>";
$n=0;
print "<td>";
foreach $maxt (@datamaxt) {
        $n++;
        if ($ob_norm eq "Observed Data") {
		print "<br>";
                print $maxt;
            }
           if ($maxt !~ "M") {
                        $maxt_total += $maxt;
                        $num_maxt += 1;}
         }
print "</td>";
$n=0;
print "<td>";
foreach $mint (@datamint) {
       $n++;
        if ($ob_norm eq "Observed Data") {
		print "<br>";
                print $mint;
                }
           if ($mint !~ "M") {
                        $mint_total += $mint;
                        $num_mint += 1;}
         }
print "</td>";
$n=0;
print "<td>";
foreach $avgt (@datamint) {
        if ($datamint[$n] !~ m/M/) {
        $avg = ($datamint[$n] + $datamaxt[$n] + .5)/2;
        $avg = sprintf("%.0f", $avg);
        }
        else
        {
        $avg = "M";
        }
        $n++;
        if ($ob_norm eq "Observed Data") {
                print "<br>";
                print $avg;
                }
           if ($avg ne "M") {
                        $avg_total += $avg;
                        $num_avg += 1;}
         }
print "</td>";
$n=0;
print "<td>";
foreach $mint (@datamint) {
        if ($datamint[$n] !~ m/M/) {
        $avg = ($datamint[$n] + $datamaxt[$n]+ .5)/2;
        $avg = sprintf("%.0f", $avg);
        }
        else
        {
        $avg = "M";
        }
        if ($avg ne "M") {
        $hdd = (65 - $avg);
        if ($hdd < 0) {
        $hdd = 0;
        }
        }
        else
        {
        $hdd = "M";
        }
        $n++;
        if ($ob_norm eq "Observed Data") {
                print "<br>";
                print $hdd;
                }
           if ($hdd ne "M") {
                        $hdd_total += $hdd;
                        $num_hdd += 1;}
         }
print "</td>";
$n=0;
print "<td>";
foreach $mint (@datamint) {
        if ($datamint[$n] !~ m/M/) {
        $avg = ($datamint[$n] + $datamaxt[$n] + .5)/2;
        $avg = sprintf("%.0f", $avg);
        }
        else
        {
        $avg = "M";
        }
        if ($avg ne "M") {
        $cdd = ($avg - 65);
        if ($cdd < 0) {
        $cdd = 0;
        }
        }
        else
        {
        $cdd = "M";
        }
        $n++;
        if ($ob_norm eq "Observed Data") {
                print "<br>";
                print $cdd;
                }
           if ($cdd ne "M") {
                        $cdd_total += $cdd;
                        $num_cdd += 1;}
         }
print "</td>";
$n=0;
print "<td>";
foreach $mint (@datamint) {
        if ($datamint[$n] !~ m/M/) {
        $avg = ($datamint[$n] + $datamaxt[$n] + .5)/2;
        $avg = sprintf("%.0f", $avg);
        }
        else
        {
        $avg = "M";
        }
        if ($avg ne "M") {
        $gdd = ($avg - 50);
        if ($gdd < 0) {
        $gdd = 0;
        }
        }
        else
        {
        $gdd = "M";
        }
        $n++;
        if ($ob_norm eq "Observed Data") {
                print "<br>";
                print $gdd;
                }
           if ($gdd ne "M") {
                        $gdd_total += $gdd;
                        $num_gdd += 1;}
         }
print "</td>";
$n=0;
print "<td>";
foreach $pcpn (@datapcpn) {
        $n++;
        if ($ob_norm eq "Observed Data") {
		print "<br>";
                print $pcpn;
                }
           if ($pcpn ne "M") {
                        $pcpn_total += $pcpn;
                        $num_pcpn += 1;}
         }
print "</td>";
$n=0 ;         
print "<td>";
foreach $snow (@datasnow) {
        $n++;
        if ($ob_norm eq "Observed Data") {
		print "<br>";
                print $snow;
                }
           if ($snow ne "M") {
                        $snow_total += $snow;
                        $num_snow += 1;}
         }
print "</td>";
$n=0;
print "<td>";
foreach $snwg (@datasnwg) {
        $n++;
        if ($ob_norm eq "Observed Data") {
		print "<br>";
                print $snwg;
                }
           if ($snwg ne "M") {
                        $snwg_total += $snwg;
                        $num_snwg += 1;}
         }
print "</td>";
$n=0;
print "<td>";
foreach $pkwnddir (@datapkwnddir) {
        $n++;
        if ($ob_norm eq "Observed Data") {
                print "<br>";
                print $pkwnddir;
                }
         }
print "</td>";
$n=0;
print "<td>";
foreach $pkwndspd (@datapkwndspd) {
        $n++;
        if ($ob_norm eq "Observed Data") {
                print "<br>";
                print $pkwndspd;
                }
         }
print "</td>";
$n=0;
print "<td>";
foreach $avgwnd (@dataavgwnd) {
        $n++;
        if ($ob_norm eq "Observed Data") {
                print "<br>";
                print $avgwnd;
                }
                     if ($avgwnd !~ "M") {
                        $wnd_total += $avgwnd;
                        $num_wnd += 1;}
         }
print "</td>";
$n=0;
print "<td>";
foreach $wxcode (@datawxcode) {
        $wxcode =~ s/^\s+//;
        $wxcode =~ s/\s+$//;
        $n++;
        if ($ob_norm eq "Observed Data") {
$wx = "";
if ($wxcode eq "M") {
$wx = "M";
} else {
if ($wxcode == 0) {
$wx = "None";
}
if ($wxcode - 8192 >= 0) {
$wx = "S";
$wxcode = $wxcode - 8192;
}
if ($wxcode - 4096 >= 0) {
$wx = $wx."R";
$wxcode = $wxcode - 4096;
}
if ($wxcode - 2048 >= 0) {
$wx = $wx."X";
$wxcode = $wxcode - 2048;
}
if ($wxcode - 1024 >= 0) {
$wx = $wx."W";
$wxcode = $wxcode - 1024;
}
if ($wxcode - 512 >= 0) {
$wx = $wx."B";
$wxcode = $wxcode - 512;
}
if ($wxcode - 256 >= 0) {
$wx = $wx."D";
$wxcode = $wxcode - 256;
}
if ($wxcode - 128 >= 0) {
$wx = $wx."A";
$wxcode = $wxcode - 128;
}
if ($wxcode - 64 >= 0) {
$wx = $wx."T";
$wxcode = $wxcode - 64;
}
if ($wxcode - 32 >= 0) {
$wx = $wx."G";
$wxcode = $wxcode - 32;
}
if ($wxcode - 16 >= 0) {
$wx = $wx."I";
$wxcode = $wxcode - 16;
}
if ($wxcode - 8 >= 0) {
$wx = $wx."L";
$wxcode = $wxcode - 8;
}
if ($wxcode - 4 >= 0) {
$wx = $wx."V";
$wxcode = $wxcode - 4;
}
if ($wxcode - 2 >= 0) {
$wx = $wx."F";
$wxcode = $wxcode - 2;
}
if ($wxcode - 1 >= 0) {
$wx = $wx."K";
$wxcode = $wxcode - 1;
}}

                print "<br>";
                print $wx;
                }
         }
print "</td>";
print "</tr>";
} 

# DEH ...
if ($ob_norm eq "Normals") {
$n=0;
foreach $line (@datanmmaxt) {
        $n++;
        if ($ob_norm eq "Normals") {
                print "<br>";
                print $n;
                }
           }
print "</td>";
$n=0;
print "<td>";
foreach $nmmaxt (@datanmmaxt) {
        $n++;
        if ($ob_norm eq "Normals") {
                print "<br>";
                print $nmmaxt;
            }
           if ($nmmaxt ne "M") {
                        $maxt_total += $nmmaxt;
                        $num_maxt += 1;}
         }
print "</td>";
$n=0;
print "<td>";
foreach $nmmint (@datanmmint) {
        $n++;
        if ($ob_norm eq "Normals") {
                print "<br>";
                print $nmmint;
                }
           if ($nmmint ne "M") {
                        $mint_total += $nmmint;
                        $num_mint += 1;}
         }
print "</td>";
$n=0;
print "<td>";
foreach $nmtemp (@datanmtemp) {
        $n++;
        if ($ob_norm eq "Normals") {
                print "<br>";
                print $nmtemp;
                }
         }
print "</td>";
$n=0;
print "<td>";
foreach $nmhdd (@datanmhdd) {
        $n++;
        if ($ob_norm eq "Normals") {
                print "<br>";
                print $nmhdd;
                }
         }
print "</td>";
$n=0;
print "<td>";
foreach $nmcdd (@datanmcdd) {
        $n++;
        if ($ob_norm eq "Normals") {
                print "<br>";
                print $nmcdd;
                }
         }
print "</td>";
$n=0;
print "<td>";
foreach $nmpcpn (@datanmpcpn) {
        $n++;
        if ($ob_norm eq "Normals") {
                print "<br>";
                print $nmpcpn;
                }
           if ($nmpcpn ne "M") {
                        $pcpn_total += $nmpcpn;
                        $num_pcpn += 1;}
         }
print "</td>";
$n=0 ;
print "<td>";
foreach $nmsnow (@datanmsnow) {
        $n++;
        if ($ob_norm eq "Normals") {
                print "<br>";
                print $nmsnow;
                }
           if ($nmsnow ne "M") {
                        $snow_total += $nmsnow;
                        $num_snow += 1;}
        } 
print "</td>";
print "</tr>";

}

# DEH	
if ($ob_norm eq "Records") {
        print "<tr>";
        print "<td>";
        foreach $line (@datahimaxt) {
        $n++;
        $line =~ s/^\s+//;
        ($himaxt,$himaxt_yr) = split(/\s+/,$line);
          print "<br>";
          print $n;
         }
       print "</td>";

        print "<td>";
        foreach $line (@datahimaxt) {
        $n++;
        $line =~ s/^\s+//;
        ($himaxt,$himaxt_yr) = split(/\s+/,$line);
          print "<br>";
          print $himaxt;
         }
       print "</td>";
       print "<td>";
       foreach $line (@datahimaxt) {
        $n++;
        $line =~ s/^\s+//;
        ($himaxt,$himaxt_yr) = split(/\s+/,$line);
          print "<br>";
          print $himaxt_yr;
         }
        print "</td>";
        print "<td>";
        foreach $line (@datalomaxt) {
        $n++;
        $line =~ s/^\s+//;
        ($lomaxt,$lomaxt_yr) = split(/\s+/,$line);
          print "<br>";
          print $lomaxt;
         }
        print "</td>";
        print "<td>";
        foreach $line (@datalomaxt) {
        $n++;
        $line =~ s/^\s+//;
        ($lomaxt,$lomaxt_yr) = split(/\s+/,$line);
          print "<br>";
          print $lomaxt_yr;
         }
       print "</td>";
        print "<td>";
        foreach $line (@datalomint) {
        $n++;
        $line =~ s/^\s+//;
        ($lomint,$lomint_yr) = split(/\s+/,$line);
          print "<br>";
          print $lomint;
         }
        print "</td>";
        print "<td>";
        foreach $line (@datalomint) {
        $n++;
        $line =~ s/^\s+//;
        ($lomint,$lomint_yr) = split(/\s+/,$line);
          print "<br>";
          print $lomint_yr;
         }
        print "</td>";
        print "<td>";
        foreach $line (@datahimint) {
        $n++;
        $line =~ s/^\s+//;
        ($himint,$himint_yr) = split(/\s+/,$line);
          print "<br>";
          print $himint;
         }
        print "</td>";
        print "<td>";
        foreach $line (@datahimint) {
        $n++;
        $line =~ s/^\s+//;
        ($himint,$himint_yr) = split(/\s+/,$line);
          print "<br>";
          print $himint_yr;
         }
        print "</td>";
        print "<td>";
        foreach $line (@datahipcpn) {
        $n++;
        $line =~ s/^\s+//;
        ($hipcpn,$hipcpn_yr) = split(/\s+/,$line);
          print "<br>";
          print $hipcpn;
         }
        print "</td>";
        print "<td>";
        foreach $line (@datahipcpn) {
        $n++;
        $line =~ s/^\s+//;
        ($hipcpn,$hipcpn_yr) = split(/\s+/,$line);
          print "<br>";
          print $hipcpn_yr;
         }
        print "</td>";
                print "<td>";
        foreach $line (@datahisnow) {
        $n++;
        $line =~ s/^\s+//;
        ($hisnow,$hisnow_yr) = split(/\s+/,$line);
          print "<br>";
          print $hisnow;
         }
        print "</td>";
                print "<td>";
        foreach $line (@datahisnow) {
        $n++;
        $line =~ s/^\s+//;
        ($hisnow,$hisnow_yr) = split(/\s+/,$line);
          print "<br>";
          print $hisnow_yr;
         }
        print "</td>";
print "</tr>";
        print "</table>"; 


}	


#  Print out the avgs/totals if observed data was requested


if ($ob_norm eq "Observed Data") {
        print "<tr>";
 	if ($num_maxt > 0) {
		$avg_maxt = sprintf("%5.1f",($maxt_total / $num_maxt));
	} else {
		$avg_maxt = "M";
	}
	if ($num_mint > 0) {
		$avg_mint = sprintf("%5.1f",($mint_total / $num_mint));
	} else {
		$avg_mint = "M";
	}
        if ($num_avg > 0) {
                $avg_avg = sprintf("%5.1f",($avg_total / $num_avg));
        } else {
                $avg_avg = "M";
        }
        if ($num_hdd > 0) {
                $hdd_total = sprintf("%5.0f",$hdd_total);
        } else {
                $hdd_total = "M";
        }
        if ($num_cdd > 0) {
                $cdd_total = sprintf("%5.0f",$cdd_total);
        } else {
                $cdd_total = "M";
        }
        if ($num_gdd > 0) {
                $gdd_total = sprintf("%5.0f",$gdd_total);
        } else {
                $gdd_total = "M";
        }
        if ($num_wnd > 0) {
                $wnd_total = sprintf("%5.1f",($wnd_total/$num_wnd));
        } else {
                $wnd_total = "M";
        }
	if ($num_pcpn > 0) {
		$pcpn_total = sprintf("%5.2f",$pcpn_total);
	} else {
		$pcpn_total = "M";
	}
	if ($num_snow > 0) {
		$snow_total = sprintf("%5.1f",$snow_total);
	} else {
		$snow_total = "M";
	}
        $monmmaxt =~ s/^\s+//;
        $monmmaxt =~ s/\s+$//;
        $monmmint =~ s/^\s+//;
        $monmmint =~ s/\s+$//;
        $monmtemp =~ s/^\s+//;
        $monmtemp =~ s/\s+$//;
        $monmhdd =~ s/^\s+//;
        $monmhdd =~ s/\s+$//;
        $monmcdd =~ s/^\s+//;
        $monmcdd =~ s/\s+$//;
        $monmpcpn =~ s/^\s+//;
        $monmpcpn =~ s/\s+$//;
        $monmsnow =~ s/^\s+//;
        $monmsnow =~ s/\s+$//;
        if ($monmmaxt eq "M") {
        $dep_maxt = "N/A";
        } else {
        $dep_maxt = sprintf("%5.1f",($avg_maxt - $monmmaxt));
        }
        if ($monmmint eq "M") {
        $dep_mint = "N/A";
        } else {
        $dep_mint = sprintf("%5.1f",($avg_mint - $monmmint));
        }    
        if ($monmtemp eq "M") {
        $dep_avg = "N/A";
        } else {
        $dep_avg = sprintf("%5.1f",($avg_avg - $monmtemp));
        }
        if ($monmhdd eq "M") {
        $dep_hdd = "N/A";
        } else {
        $dep_hdd = sprintf("%4d",($hdd_total - $monmhdd));
        }
        if ($monmcdd eq "M") {
        $dep_cdd = "N/A";
        } else {
        $dep_cdd = sprintf("%4d",($cdd_total - $monmcdd));
        }
        if ($monmpcpn eq "M") {
        $dep_pcpn = "N/A";
        } else {
        $dep_pcpn = sprintf("%5.2f",($avg_pcpn - $monmpcpn));
        }
        if ($monmsnow eq "M") {
        $dep_snow = "N/A";
        } else {
        $dep_snow = sprintf("%5.1f",($avg_snow - $monmsnow)); 
        }
        print td(['Avg/Tot',$avg_maxt,$avg_mint,$avg_avg,$hdd_total,$cdd_total,$gdd_total,$pcpn_total,$snow_total,'N/A','N/A','N/A',$wnd_total,'N/A']),
        Tr(td(['Dep',$dep_maxt,$dep_mint,$dep_avg,$dep_hdd,$dep_cdd,'N/A',$dep_pcpn,$dep_snow,'N/A','N/A','N/A','N/A','N/A'])),
        "</table>",        
        "<font color=red>",
        "</center>",
        "Weather :  R = Rain  S = Snow  F = Fog  V = Fog vis<1/4  K = Haze/Smoke  B = Blowing Snow  L = Drizzle  I = Ice Pellets",br,"D = Dust/Sand  G = Glaze  W = Wind  T = Thunder  A = Hail  O = Tornado",br,
        "<font color=green>",
        "HDD (Heating Degree Days) and CDD (Cooling Degree Days) are the difference between 65 degrees and the average temperature.",br,
        "GDD (Growing degree Days) are the difference between 50 degrees and the average temperature.",
       } 
if ($ob_norm eq "Normals") {
        if ($num_maxt > 0) {
                $avg_maxt = sprintf("%5.1f",($maxt_total / $num_maxt));
        } else {
                $avg_maxt = "M";
        }
        if ($num_mint > 0) {
                $avg_mint = sprintf("%5.1f",($mint_total / $num_mint));
        } else {
                $avg_mint = "M";
        }
        if ($num_pcpn > 0) {
                $pcpn_total = sprintf("%5.2f",$pcpn_total);
        } else {
                $pcpn_total = "M";
        }
        if ($num_snow > 0) {
                $snow_total = sprintf("%5.1f",$snow_total);
        } else {
                $snow_total = "M";
        }
        print td(['Avg/Tot',$monmmaxt,$monmmint,$monmtemp,$monmhdd,$monmcdd,$monmpcpn,$monmsnow]),
        "</table>";
       }

}


exit;


